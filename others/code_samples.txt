class AdminGetWeeklyTablesView(View):
    def get(self, request, *args, **kwargs):
        check_table_is_zero = Player_Week_table.objects.all()
        if check_table_is_zero.count() == 0:
            save_new_week = Player_Week_table.objects.create(week_no = kwargs.get('week_id'), is_new_week = True)
            save_new_week.save()
        if kwargs.get('week_id'):
            is_new_week = Player_Week_table.objects.values('id','week_no','is_new_week').latest('week_no')
            print(is_new_week.get('week_no'))
            if is_new_week.get('week_no') < kwargs.get('week_id'):
                print(True)
                Player_Week_table.objects.filter(id = is_new_week.get('id')).update(is_new_week = False)
                save_new_week = Player_Week_table.objects.create(week_no = kwargs.get('week_id'), is_new_week = True)
                save_new_week.save()
            else:
                print(False)
            '''
            Include a message here to tell admin that Player_Week_table has been updated
            '''
        get_statistics = self.__get_statistics_tables_week_no(kwargs.get('week_id'))
        print(get_statistics)
        return redirect('admin_update')

    def __get_statistics_tables_week_no(self, week_id):
        check_form_table = Form_table.objects.values('week_no_id_id')
        for i in range(0, len(check_form_table)):
            if check_form_table[i].get('week_no_id_id') is None:
                Form_table.objects.update(week_no_id_id = week_id)
            if check_form_table[i].get('week_no_id_id') < week_id:
                    Form_table.objects.filter(week_no_id_id = week_id).update(week_no_id_id = week_id)
            else:
                return False
